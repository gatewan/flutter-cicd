// Mocks generated by Mockito 5.0.16 from annotations
// in ditonton/test/xtra_helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:io' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:lib_core/data/models/movie_detail_model.dart' as _i3;
import 'package:lib_core/data/models/movie_model.dart' as _i12;
import 'package:lib_core/data/models/movie_table.dart' as _i14;
import 'package:lib_core/data/models/tv_detail_model.dart' as _i4;
import 'package:lib_core/data/models/tv_model.dart' as _i19;
import 'package:lib_core/data/models/tv_table.dart' as _i21;
import 'package:lib_core/data/sources/local/db/database_helper.dart' as _i22;
import 'package:lib_core/data/sources/local/movie_local_data_source.dart'
    as _i13;
import 'package:lib_core/data/sources/local/tv_local_data_source.dart' as _i20;
import 'package:lib_core/data/sources/remote/movie_remote_data_source.dart'
    as _i11;
import 'package:lib_core/data/sources/remote/tv_remote_data_source.dart'
    as _i18;
import 'package:lib_core/domain/entities/movie.dart' as _i9;
import 'package:lib_core/domain/entities/movie_detail.dart' as _i10;
import 'package:lib_core/domain/entities/tv.dart' as _i16;
import 'package:lib_core/domain/entities/tv_detail.dart' as _i17;
import 'package:lib_core/lib_core.dart' as _i8;
import 'package:m_movie/domain/interfaces/movie_interface.dart' as _i6;
import 'package:m_tv/domain/interface/tv_interface.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i23;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeMovieDetailResponse_1 extends _i1.Fake
    implements _i3.MovieDetailResponse {}

class _FakeTvDetailModel_2 extends _i1.Fake implements _i4.TvDetailModel {}

class _FakeDuration_3 extends _i1.Fake implements Duration {}

class _FakeHttpClientRequest_4 extends _i1.Fake
    implements _i5.HttpClientRequest {}

/// A class which mocks [MovieInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieInterface extends _i1.Mock implements _i6.MovieInterface {
  MockMovieInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i9.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i9.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i9.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i10.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i2.Either<_i8.Failure, _i10.MovieDetail>>.value(
              _FakeEither_0<_i8.Failure, _i10.MovieDetail>())) as _i7
          .Future<_i2.Either<_i8.Failure, _i10.MovieDetail>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i9.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i9.Movie>>> searchMovies(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
          returnValue: Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>.value(
              _FakeEither_0<_i8.Failure, List<_i9.Movie>>())) as _i7
          .Future<_i2.Either<_i8.Failure, List<_i9.Movie>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i11.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i12.MovieModel>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue:
                  Future<List<_i12.MovieModel>>.value(<_i12.MovieModel>[]))
          as _i7.Future<List<_i12.MovieModel>>);
  @override
  _i7.Future<List<_i12.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<_i12.MovieModel>>.value(<_i12.MovieModel>[]))
      as _i7.Future<List<_i12.MovieModel>>);
  @override
  _i7.Future<List<_i12.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<_i12.MovieModel>>.value(<_i12.MovieModel>[]))
      as _i7.Future<List<_i12.MovieModel>>);
  @override
  _i7.Future<_i3.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<_i3.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse_1()))
          as _i7.Future<_i3.MovieDetailResponse>);
  @override
  _i7.Future<List<_i12.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<_i12.MovieModel>>.value(<_i12.MovieModel>[]))
          as _i7.Future<List<_i12.MovieModel>>);
  @override
  _i7.Future<List<_i12.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<_i12.MovieModel>>.value(<_i12.MovieModel>[]))
          as _i7.Future<List<_i12.MovieModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i13.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> insertWatchlist(_i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<String> removeWatchlist(_i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i14.MovieTable?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<_i14.MovieTable?>.value())
          as _i7.Future<_i14.MovieTable?>);
  @override
  _i7.Future<List<_i14.MovieTable>> getWatchlistMovies() => (super.noSuchMethod(
          Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<List<_i14.MovieTable>>.value(<_i14.MovieTable>[]))
      as _i7.Future<List<_i14.MovieTable>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TvInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvInterface extends _i1.Mock implements _i15.TvInterface {
  MockTvInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>> getNowPlayingTvs() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTvs, []),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i16.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>> getPopularTvs() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvs, []),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i16.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>> getTopRatedTvs() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTvs, []),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i16.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, _i17.TvDetail>> getTvDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvDetail, [id]),
              returnValue: Future<_i2.Either<_i8.Failure, _i17.TvDetail>>.value(
                  _FakeEither_0<_i8.Failure, _i17.TvDetail>()))
          as _i7.Future<_i2.Either<_i8.Failure, _i17.TvDetail>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>> getTvRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i16.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>> searchTvs(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTvs, [query]),
              returnValue: Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>.value(
                  _FakeEither_0<_i8.Failure, List<_i16.Tv>>()))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i16.Tv>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TvRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRemoteDataSource extends _i1.Mock
    implements _i18.TvRemoteDataSource {
  MockTvRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i19.TvModel>> getNowPlayingTvs() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTvs, []),
              returnValue: Future<List<_i19.TvModel>>.value(<_i19.TvModel>[]))
          as _i7.Future<List<_i19.TvModel>>);
  @override
  _i7.Future<List<_i19.TvModel>> getPopularTvs() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvs, []),
              returnValue: Future<List<_i19.TvModel>>.value(<_i19.TvModel>[]))
          as _i7.Future<List<_i19.TvModel>>);
  @override
  _i7.Future<List<_i19.TvModel>> getTopRatedTvs() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTvs, []),
              returnValue: Future<List<_i19.TvModel>>.value(<_i19.TvModel>[]))
          as _i7.Future<List<_i19.TvModel>>);
  @override
  _i7.Future<_i4.TvDetailModel> getTvDetail(int? id) => (super.noSuchMethod(
          Invocation.method(#getTvDetail, [id]),
          returnValue: Future<_i4.TvDetailModel>.value(_FakeTvDetailModel_2()))
      as _i7.Future<_i4.TvDetailModel>);
  @override
  _i7.Future<List<_i19.TvModel>> getTvRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue: Future<List<_i19.TvModel>>.value(<_i19.TvModel>[]))
          as _i7.Future<List<_i19.TvModel>>);
  @override
  _i7.Future<List<_i19.TvModel>> searchTvs(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchTvs, [query]),
              returnValue: Future<List<_i19.TvModel>>.value(<_i19.TvModel>[]))
          as _i7.Future<List<_i19.TvModel>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TvLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvLocalDataSource extends _i1.Mock implements _i20.TvLocalDataSource {
  MockTvLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> insertWatchlist(_i21.TvTable? tv) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [tv]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<String> removeWatchlist(_i21.TvTable? tv) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [tv]),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i21.TvTable?> getTvById(int? id) => (super.noSuchMethod(
      Invocation.method(#getTvById, [id]),
      returnValue: Future<_i21.TvTable?>.value()) as _i7.Future<_i21.TvTable?>);
  @override
  _i7.Future<List<_i21.TvTable>> getWatchlistTvs() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTvs, []),
              returnValue: Future<List<_i21.TvTable>>.value(<_i21.TvTable>[]))
          as _i7.Future<List<_i21.TvTable>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i22.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i23.Database?> get database =>
      (super.noSuchMethod(Invocation.getter(#database),
              returnValue: Future<_i23.Database?>.value())
          as _i7.Future<_i23.Database?>);
  @override
  _i7.Future<int> insertWatchlist(_i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> removeWatchlist(_i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<Map<String, dynamic>?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as _i7.Future<Map<String, dynamic>?>);
  @override
  _i7.Future<List<Map<String, dynamic>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as _i7.Future<List<Map<String, dynamic>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.HttpClient {
  @override
  Duration get idleTimeout =>
      (super.noSuchMethod(Invocation.getter(#idleTimeout),
          returnValue: _FakeDuration_3()) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) =>
      super.noSuchMethod(Invocation.setter(#idleTimeout, _idleTimeout),
          returnValueForMissingStub: null);
  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
      Invocation.setter(#connectionTimeout, _connectionTimeout),
      returnValueForMissingStub: null);
  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
      Invocation.setter(#maxConnectionsPerHost, _maxConnectionsPerHost),
      returnValueForMissingStub: null);
  @override
  bool get autoUncompress => (super
          .noSuchMethod(Invocation.getter(#autoUncompress), returnValue: false)
      as bool);
  @override
  set autoUncompress(bool? _autoUncompress) =>
      super.noSuchMethod(Invocation.setter(#autoUncompress, _autoUncompress),
          returnValueForMissingStub: null);
  @override
  set userAgent(String? _userAgent) =>
      super.noSuchMethod(Invocation.setter(#userAgent, _userAgent),
          returnValueForMissingStub: null);
  @override
  set authenticate(_i7.Future<bool> Function(Uri, String, String?)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticate, f),
          returnValueForMissingStub: null);
  @override
  set findProxy(String Function(Uri)? f) =>
      super.noSuchMethod(Invocation.setter(#findProxy, f),
          returnValueForMissingStub: null);
  @override
  set authenticateProxy(
          _i7.Future<bool> Function(String, int, String, String?)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticateProxy, f),
          returnValueForMissingStub: null);
  @override
  set badCertificateCallback(
          bool Function(_i5.X509Certificate, String, int)? callback) =>
      super.noSuchMethod(Invocation.setter(#badCertificateCallback, callback),
          returnValueForMissingStub: null);
  @override
  _i7.Future<_i5.HttpClientRequest> open(
          String? method, String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#open, [method, host, port, path]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> openUrl(String? method, Uri? url) =>
      (super.noSuchMethod(Invocation.method(#openUrl, [method, url]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> get(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#get, [host, port, path]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> getUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#getUrl, [url]),
          returnValue:
              Future<_i5.HttpClientRequest>.value(_FakeHttpClientRequest_4()))
      as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> post(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#post, [host, port, path]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> postUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#postUrl, [url]),
          returnValue:
              Future<_i5.HttpClientRequest>.value(_FakeHttpClientRequest_4()))
      as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> put(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#put, [host, port, path]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> putUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#putUrl, [url]),
          returnValue:
              Future<_i5.HttpClientRequest>.value(_FakeHttpClientRequest_4()))
      as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> delete(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#delete, [host, port, path]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> deleteUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#deleteUrl, [url]),
          returnValue:
              Future<_i5.HttpClientRequest>.value(_FakeHttpClientRequest_4()))
      as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> patch(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#patch, [host, port, path]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> patchUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#patchUrl, [url]),
          returnValue:
              Future<_i5.HttpClientRequest>.value(_FakeHttpClientRequest_4()))
      as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> head(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#head, [host, port, path]),
              returnValue: Future<_i5.HttpClientRequest>.value(
                  _FakeHttpClientRequest_4()))
          as _i7.Future<_i5.HttpClientRequest>);
  @override
  _i7.Future<_i5.HttpClientRequest> headUrl(Uri? url) => (super.noSuchMethod(
          Invocation.method(#headUrl, [url]),
          returnValue:
              Future<_i5.HttpClientRequest>.value(_FakeHttpClientRequest_4()))
      as _i7.Future<_i5.HttpClientRequest>);
  @override
  void addCredentials(
          Uri? url, String? realm, _i5.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(#addCredentials, [url, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void addProxyCredentials(String? host, int? port, String? realm,
          _i5.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(
              #addProxyCredentials, [host, port, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
